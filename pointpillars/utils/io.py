# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_utils.io.ipynb (unless otherwise specified).

__all__ = ['read_config', 'save_network_checkpoint', 'save_network', 'load_network_save', 'load_single_pcd']

# Cell
import os
import torch
import numpy as np
from pathlib import Path
from configparser import SafeConfigParser

# Cell
def read_config(section=None, option=None):
    """Reads the config from a hard coded directory"""
    config_location = Path("/home/qhs67/git/bachelorthesis_sven_thaele/code/pointpillars/config.ini")
    config = SafeConfigParser()
    config.read(config_location)
    return config

# Cell
def save_network_checkpoint(network: torch.nn.Module,
                            optimizer: torch.nn.Module,
                            scheduler: torch.nn.Module,
                            loss: torch.nn.Module,
                            ident_time: str,
                            epoch: int):

    checkpoint_folder = "/home/qhs67/git/bachelorthesis_sven_thaele/code/checkpoints/"

    torch.save({
            'epoch': epoch,
            'model_state_dict': network.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'scheduler_state_dict': scheduler.state_dict(),
            'loss': loss,
        }, checkpoint_folder + "checkpoint_{}_e{}".format(ident_time, epoch))

# Cell
def save_network(network: torch.nn.Module, ident_time: str, n_epochs: int):
    checkpoint_folder = "/home/qhs67/git/bachelorthesis_sven_thaele/code/checkpoints/"
    torch.save(network.state_dict(), checkpoint_folder + "trained_{}_e{}".format(ident_time, n_epochs))


# Cell
def load_network_save(save_name: str):
    checkpoint_folder = "/home/qhs67/git/bachelorthesis_sven_thaele/code/checkpoints/"
    return torch.load(checkpoint_folder + save_name)


def load_single_pcd(pcd_nbr: str):
    img_loc = "/home/qhs67/git/bachelorthesis_sven_thaele/code/data/kitti/training/velodyne/training/" + pcd_nbr + ".bin"
    pcloud = np.fromfile(img_loc, dtype=np.float32, count=-1)
    pcloud = torch.as_tensor(pcloud, device="cuda:0")
    pcloud = pcloud.reshape([-1,4])

    return pcloud