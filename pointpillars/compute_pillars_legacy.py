# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_compute_pillars_legacy.ipynb (unless otherwise specified).

__all__ = ['calculate_pillar_center', 'calculate_pillars']

# Cell
import torch
from .utils.io import read_config

# Cell
def calculate_pillar_center(x_min_pillar, y_min_pillar, gparam):

    x = x_min_pillar + 0.5 * gparam.getfloat('x_step')
    y = x_min_pillar + 0.5 * gparam.getfloat('y_step')
    z = (gparam.getfloat('z_max') - gparam.getfloat('z_min')) / 2.0

    return torch.tensor([x, y, z], dtype=dt, device=dev)

# Cell
def calculate_pillars(pcloud):
    if not torch.is_tensor(pcloud):
        raise ValueError("Tensor expected but not given.")

    gparam = read_config()['pillars']
    pcloud = remove_invalid(pcloud, gparam)

    x_min = gparam.getfloat('x_min')
    y_min = gparam.getfloat('y_min')
    x_step = gparam.getfloat('x_step')
    y_step = gparam.getfloat('y_step')

    max_points_per_pillar = gparam.getint('max_points_per_pillar')
    max_pillars = gparam.getint('max_pillars')

    # TODO: Specify what happens when n_x and n_y are not exact ints
    n_x = int((gparam.getfloat('x_max') - x_min) / x_step)
    n_y = int((gparam.getfloat('y_max') - y_min) / y_step)


    start = torch.cuda.Event(enable_timing=True)
    end = torch.cuda.Event(enable_timing=True)
    start.record()



    pillars = []
    for i in range(n_x):
        for j in range(n_y):
            x_min_pillar = x_min + i * x_step
            x_max_pillar = x_min_pillar + x_step
            y_min_pillar = y_min + j * y_step
            y_max_pillar = y_min_pillar + x_step

            points_in_pillar = get_points_in_pillar(pcloud, x_min_pillar, x_max_pillar, y_min_pillar, y_max_pillar)
            if points_in_pillar.shape[0] == 0:
                continue

            pillar_center = calculate_pillar_center(x_min_pillar, y_min_pillar, gparam)
            # TODO: Move Pillar object to gpu
            pillars.append(Pillar(points_in_pillar, pillar_center))

    end.record()
    torch.cuda.synchronize()
    print(start.elapsed_time(end))

    # cannot add zeroes to pillars array
    pillars_points = torch.empty((max_pillars, max_points_per_pillar, 9), dtype=torch.float, device=dev)
    pillars_indicies = torch.empty((max_pillars, 3), dtype=torch.float, device=dev)
    pillars_trimmed = Pillar.sample_tensor(pillars, max_pillars)
    pillerid = 0
    for pillar in pillars_trimmed:
        pillar.calculate_obj_attributes()
        center = pillar.center
        points_with_attributes = pillar.points_with_attributes

        pillars_points[pillerid] = points_with_attributes
        pillars_indicies[pillerid] = center
        pillerid += 1

    return pillars_points, pillars_indicies